filter(!grepl("cadherin", description, ignore.case = TRUE))
no_ase <- non_unch %>%
filter(!grepl("ase", description, ignore.case = TRUE)) %>% #19256
filter(!grepl("ova", description, ignore.case = TRUE)) %>% #19244
filter(!grepl("elong", description, ignore.case = TRUE)) %>% #19124
filter(!grepl("antigen", description, ignore.case = TRUE)) %>% #19068
filter(!grepl("zinc", description, ignore.case = TRUE)) %>% #18437
filter(!grepl("spidroin|silk", description, ignore.case = TRUE)) %>% #15278
filter(!grepl("domain", description, ignore.case = TRUE)) %>% #14262
filter(!grepl("latrotoxin", description, ignore.case = TRUE)) %>% #13817
filter(!grepl("transp", description, ignore.case = TRUE)) %>% #13267
filter(!grepl("recept", description, ignore.case = TRUE)) %>% #12733
filter(!grepl("regul", description, ignore.case = TRUE)) %>% #12560
filter(!grepl("transcription", description, ignore.case = TRUE)) %>% #12320
filter(!grepl("cadherin", description, ignore.case = TRUE)) %>% #11983
group_by(qseqid)
ase_str <- paste(as.vector(no_ase[['description']]), sep = " ", collapse=" ")
ase_str <- str_remove_all(ase_str, "[:;,]")
ase_str <- str_replace_all(ase_str, '-', ' ')
ase_chars <- unlist(strsplit(ase_str, " "))
ase_chars <- tolower(ase_chars)
sort(table(ase_chars), decreasing=T)[1:60]
no_ase <- non_unch %>%
cvx
no <- non_unch %>%
filter(!grepl("spidroin|silk", description, ignore.case = TRUE))
24996 - 21830
18437 - 15278
rm(list=ls())
require(ggplot2)
#install.packages("pscl")
#install.packages(glmmTMB)
require(glmmTMB)
require(pscl)
require(boot)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(here)
library(phyloseq)
library(vegan)
library(refund)
library(reshape2)
library(kableExtra)
#library(HMP2Data) #install the library from github
#path to protected dbGap data location
local_path <- "~/Documents/MOMS-PI"# change me
#local_path <- "~/MOMS-PI"# change me
path2 <- file.path(local_path,"71694", "PhenoGenotypeFiles", "RootStudyConsentSet_phs001523.MOMS_PI.v1.p1.c1.DS-PREG-COM-IRB-PUB-MDS", "PhenotypeFiles")
otu <- read.csv(file = file.path(path2, "MergedFiles", "OTU_table.csv"))
rownames(otu) <- otu$X
otu$X <- NULL
t_otu <- as.data.frame(t(otu))
meta <- read.csv(file = file.path(path2, "MergedFiles", "Meta_data.csv"))
rownames(meta) <- meta$X
meta$X <- NULL
full_set <- cbind(t_otu, meta)
full_set$alpha_div <- diversity(full_set[,1:length(names(t_otu))], index="shannon")
full_set$num_reads <- rowSums(t_otu)
full_set$p_Iners <- full_set$
full_set$p_Iners <- full_set$Lactobacillus_iners/full_set$num_reads
full_set$p_Iners
hist(full_set$p_Iners)
hist(full_set$p_Iners)
beta_bin<- glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=betabinomial(link = "logit"), zi = ~ vaginal_pH + reported_ga + alpha_div + race)
mean(full_set$p_Iners)
variance(full_set$p_Iners)
var(full_set$p_Iners)
hist(full_set$p_Iners)
length(which(full_set$p_Iners == 0))
length(which(full_set$p_Iners == 1))
install.packages("zoib")
library(zoib)
install.packages("rjags")
library(zoib)
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjafs)
library(rjags)
install.packages("rjags")
library(rjags)
library(zoib)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/karunrajesh/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/karunrajesh/homebrew/opt/jags/lib'
"
)
install.packages("zoib")
library(zoib)
remove.packages("rjags")
install.packages("rjags")
library(rjags)
remove.packages("rjags")
.Platform$pkgType
library(JAGS)
install.packages(c("betareg", "dplyr", "lme4", "ModelMetrics", "plotly"))
install.packages("rjags")
library(rjags)
library(zoib)
#zoib
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
#zoib
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, random = SUBJECT_ID)
#zoib
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1|1, data = full_set, random = 1, EUID = full_set$SUBJECT_ID)
#zoib
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1|1, data = full_set, random = 1, EUID = SUBJECT_ID)
#zoib
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1|1, data = full_set, random = 1, EUID = full_set$SUBJECT_ID)
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race, data = full_set)
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1, data = full_set)
mixedL <- lmer(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
View(mixedL)
summary(mixedL)
plot(full_set$p_Iners[which(names(linpred) %in% rownames(full_set))], linpred)
linpred <- predict(mixedL)
plot(full_set$p_Iners[which(names(linpred) %in% rownames(full_set))], linpred)
aggregate(p_Iners ~ race+reported_ga, full_set, mean)
install.packages("aod")
library(aod)
betabin(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race, ~SUBJECT_ID, data = full_set)
data(orob2)
orob2
glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=list(family="beta",link="logit"), zi = ~ vaginal_pH + reported_ga + alpha_div + race)
glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"), zi = ~ vaginal_pH + reported_ga + alpha_div + race)
which(full_set$p_Iners == 1)
full_set$p_Iners[which(full_set$p_Iners == 1)] <- 0.99999
glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"), zi = ~ vaginal_pH + reported_ga + alpha_div + race)
#zoib
#zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1|1, data = full_set, random = 1, EUID = full_set$SUBJECT_ID)
library(aod)
full_set$p_Iners[which(full_set$p_Iners == 1)] <- 0.99999
betaIners <- glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"), zi = ~ vaginal_pH + reported_ga + alpha_div + race)
require(glmmTMB)
require(pscl)
require(boot)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(here)
library(phyloseq)
library(vegan)
library(refund)
library(reshape2)
library(kableExtra)
betaIners <- glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"), zi = ~ vaginal_pH + reported_ga + alpha_div + race)
betapred <- predict(betaIners)
#predicted
#x-axis people
#y-axis visits for that person
plot(full_set$p_Iners[which(names(betapred) %in% rownames(full_set))], betapred)
which(names(betapred) %in% rownames(full_set))
names(betapred)
betapred
betaIners <- glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"))
betaIners <- glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"), zi = ~ 1)
summary(betaIners)
betapred <- predict(betaIners)
betapred
test <- aggregate(Lactobacillus_iners ~ race+reported_ga, full_set, mean)
kable(test) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
count_plot <- ggplot(full_set, aes(Lactobacillus_iners)) + geom_histogram()
library(ggplot2)
count_plot <- ggplot(full_set, aes(Lactobacillus_iners)) + geom_histogram()
count_plot
hist(full_set$Lactobacillus_iners)
prop_plot <- ggplot(full_set, aes(p_Iners)) + geom_histogram()
prop_plot
library(zoib)
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1, data = full_set)
length(which(full_set$p_Iners = 0))
length(which(full_set$p_Iners == 0))
length(which(full_set$p_Iners > 0 && full_set$p_Iners <0.05))
length(which(full_set$p_Iners > 0 && full_set$p_Iners <0.1))
length(which(full_set$p_Iners > 0.0 && full_set$p_Iners <0.1))
length(which(full_set$p_Iners > 0.0 && full_set$p_Iners <0.25))
length(which(full_set$p_Iners > 0.0e-60 && full_set$p_Iners <0.25))
full_set$p_Iners
count_table <- aggregate(Lactobacillus_iners, p_Iners ~ race+reported_ga, full_set, mean)
count_table <- aggregate(Lactobacillus_iners + p_Iners ~ race+reported_ga, full_set, mean)
View(count_table)
count_table <- aggregate(c(Lactobacillus_iners, p_Iners) ~ race+reported_ga, full_set, mean)
prop_table <- aggregate(p_Iners ~ race+reported_ga, full_set, mean)
kable(prop_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
require(ggplot2)
#install.packages("pscl")
#install.packages(glmmTMB)
require(glmmTMB)
require(pscl)
require(boot)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(here)
library(phyloseq)
library(vegan)
library(refund)
library(reshape2)
library(kableExtra)
prop_table <- aggregate(p_Iners ~ race+reported_ga, full_set, mean)
kable(prop_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
count_table <- aggregate(c(Lactobacillus_iners, p_Iners) ~ race+reported_ga, full_set, mean)
count_table <- aggregate(Lactobacillus_iners ~ race+reported_ga, full_set, mean)
kable(count_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
count_table <- aggregate(list(full_list$Lactobacillus_iners, full_list$p_Iners), by = list(full_list$race, full_list$reported_ga), mean)
count_table <- aggregate(list(full_set$Lactobacillus_iners, full_set$p_Iners), by = list(full_set$race, full_set$reported_ga), mean)
View(count_table)
count_table <- aggregate(list(full_set$Lactobacillus_iners, full_set$p_Iners), by = list(full_set$race, full_set$reported_ga), mean)
colnames(count_table) <- c("race", "reported_ga", "Lactobacillus_iners", "p_Iners")
kable(count_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#Plot proportions over time
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=Industry, color=Industry)) +
facet_wrap(~race, ncol=1)
#Plot proportions over time
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race)) +
facet_wrap(~race, ncol=1)
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race))
resid(mixedL)
plot(mixedL)
par(mfrow = c(2,2))
plot(mixedL)
par(mfrow = c(2,2))
plot(mixedL)
install.packages("coefplot2",repos="http://r-forge.r-project.org")
library(coefplot2)
install.packages("coefplot")
library(coefplot2)
remotes::install_github("palday/coefplot2",
subdir = "pkg")
library(coefplot2)
coefplot2(mixedL)
plot(mixedL)
coefplot2(betaIners)
rm(list=ls())
require(ggplot2)
#install.packages("pscl")
#install.packages(glmmTMB)
require(glmmTMB)
require(pscl)
require(boot)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(here)
library(phyloseq)
library(vegan)
library(refund)
library(reshape2)
library(kableExtra)
remotes::install_github("palday/coefplot2",
subdir = "pkg")
library(coefplot2)
#library(HMP2Data) #install the library from github
#path to protected dbGap data location
local_path <- "~/Documents/MOMS-PI"# change me
#local_path <- "~/MOMS-PI"# change me
path2 <- file.path(local_path,"71694", "PhenoGenotypeFiles", "RootStudyConsentSet_phs001523.MOMS_PI.v1.p1.c1.DS-PREG-COM-IRB-PUB-MDS", "PhenotypeFiles")
otu <- read.csv(file = file.path(path2, "MergedFiles", "OTU_table.csv"))
rownames(otu) <- otu$X
otu$X <- NULL
t_otu <- as.data.frame(t(otu))
meta <- read.csv(file = file.path(path2, "MergedFiles", "Meta_data.csv"))
rownames(meta) <- meta$X
meta$X <- NULL
full_set <- cbind(t_otu, meta)
full_set$alpha_div <- diversity(full_set[,1:length(names(t_otu))], index="shannon")
full_set$num_reads <- rowSums(t_otu)
full_set$p_Iners <- full_set$Lactobacillus_iners/full_set$num_reads
#582 subjects
#aggregate at patient level
demog <- aggregate(visit_number ~ SUBJECT_ID, data = meta%>%data.frame, FUN = min)
demog <- merge(demog,meta%>%data.frame, by = c("SUBJECT_ID", "visit_number") )
#number visits per subject
df <- aggregate(visit_number ~ SUBJECT_ID, data = meta%>%data.frame, FUN = length)
colnames(df)[which(colnames(df) == "visit_number")] <- "number of visits"
demog <- merge(demog,df, by = c("SUBJECT_ID") )
#average vaginal_ph across visits
#Some patients have na so goes to 568
df <- aggregate(vaginal_pH ~ SUBJECT_ID, data = meta%>%data.frame, FUN = mean)
colnames(df)[which(colnames(df) == "vaginal_pH")] <- "mean_vaginal_ph"
demog <- merge(demog,df, by = c("SUBJECT_ID") )
Varnames <- c("vaginal_pH", "number of visits", "reported_ga", "gestational age (days)",
"time between visits", "gestational age at delivery", "vaginal ph",
"BMI", "birth weight (kg)", "vaginal delivery")
#racial breakdown, break down visits and other demographics
stratified1 = tableone::CreateTableOne(
vars = Varnames[1:3],
data = summarytools::unlabel(demog), strata = "race", includeNA = TRUE)
stratified1 <- print(stratified1, printToggle = FALSE, showAllLevels = FALSE)
stratified1 = stratified1[,!(colnames(stratified1) %in% "test")]%>%
knitr::kable(format="latex")%>%
kable_styling("striped", full_width = F, font_size = 9)
stratified1
count_table <- aggregate(list(full_set$Lactobacillus_iners, full_set$p_Iners), by = list(full_set$race, full_set$reported_ga), mean)
colnames(count_table) <- c("race", "reported_ga", "Lactobacillus_iners", "p_Iners")
kable(count_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#Look at iners over visits
prop_table <- aggregate(p_Iners ~ race+reported_ga, full_set, mean)
kable(prop_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#Plot proportions over time
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race)) +
facet_wrap(~race, ncol=1)
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race))
hist(full_set$Lactobacillus_iners)
count_plot <- ggplot(full_set, aes(Lactobacillus_iners)) + geom_histogram() + ggtitle("Iners Count Histogram")
count_plot
prop_plot <- ggplot(full_set, aes(p_Iners)) + geom_histogram() + ggtitle("Iners Proportion Histogram")
#Zero-Inflated Poisson Model
z <- glmmTMB(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + (1|SUBJECT_ID), data = full_set, family = poisson, zi = ~ vaginal_pH + reported_ga + alpha_div)
summary(z)
hist(predict(z))
rm(list=ls())
require(ggplot2)
#install.packages("pscl")
#install.packages(glmmTMB)
require(glmmTMB)
require(pscl)
require(boot)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(here)
library(phyloseq)
library(vegan)
library(refund)
library(reshape2)
library(kableExtra)
remotes::install_github("palday/coefplot2",
subdir = "pkg")
library(coefplot2)
#library(HMP2Data) #install the library from github
#path to protected dbGap data location
local_path <- "~/Documents/MOMS-PI"# change me
#local_path <- "~/MOMS-PI"# change me
path2 <- file.path(local_path,"71694", "PhenoGenotypeFiles", "RootStudyConsentSet_phs001523.MOMS_PI.v1.p1.c1.DS-PREG-COM-IRB-PUB-MDS", "PhenotypeFiles")
otu <- read.csv(file = file.path(path2, "MergedFiles", "OTU_table.csv"))
rownames(otu) <- otu$X
otu$X <- NULL
t_otu <- as.data.frame(t(otu))
meta <- read.csv(file = file.path(path2, "MergedFiles", "Meta_data.csv"))
rownames(meta) <- meta$X
meta$X <- NULL
full_set <- cbind(t_otu, meta)
full_set$alpha_div <- diversity(full_set[,1:length(names(t_otu))], index="shannon")
full_set$num_reads <- rowSums(t_otu)
full_set$p_Iners <- full_set$Lactobacillus_iners/full_set$num_reads
#582 subjects
#aggregate at patient level
demog <- aggregate(visit_number ~ SUBJECT_ID, data = meta%>%data.frame, FUN = min)
demog <- merge(demog,meta%>%data.frame, by = c("SUBJECT_ID", "visit_number") )
#number visits per subject
df <- aggregate(visit_number ~ SUBJECT_ID, data = meta%>%data.frame, FUN = length)
colnames(df)[which(colnames(df) == "visit_number")] <- "number of visits"
demog <- merge(demog,df, by = c("SUBJECT_ID") )
#average vaginal_ph across visits
#Some patients have na so goes to 568
df <- aggregate(vaginal_pH ~ SUBJECT_ID, data = meta%>%data.frame, FUN = mean)
colnames(df)[which(colnames(df) == "vaginal_pH")] <- "mean_vaginal_ph"
demog <- merge(demog,df, by = c("SUBJECT_ID") )
Varnames <- c("vaginal_pH", "number of visits", "reported_ga", "gestational age (days)",
"time between visits", "gestational age at delivery", "vaginal ph",
"BMI", "birth weight (kg)", "vaginal delivery")
#racial breakdown, break down visits and other demographics
stratified1 = tableone::CreateTableOne(
vars = Varnames[1:3],
data = summarytools::unlabel(demog), strata = "race", includeNA = TRUE)
stratified1 <- print(stratified1, printToggle = FALSE, showAllLevels = FALSE)
stratified1 = stratified1[,!(colnames(stratified1) %in% "test")]%>%
knitr::kable(format="latex")%>%
kable_styling("striped", full_width = F, font_size = 9)
stratified1
count_table <- aggregate(list(full_set$Lactobacillus_iners, full_set$p_Iners), by = list(full_set$race, full_set$reported_ga), mean)
colnames(count_table) <- c("race", "reported_ga", "Lactobacillus_iners", "p_Iners")
kable(count_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#Look at iners over visits
prop_table <- aggregate(p_Iners ~ race+reported_ga, full_set, mean)
kable(prop_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
#Plot proportions over time
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race)) +
facet_wrap(~race, ncol=1)
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race))
hist(full_set$Lactobacillus_iners)
count_plot <- ggplot(full_set, aes(Lactobacillus_iners)) + geom_histogram() + ggtitle("Iners Count Histogram")
count_plot
prop_plot <- ggplot(full_set, aes(p_Iners)) + geom_histogram() + ggtitle("Iners Proportion Histogram")
#Zero-Inflated Poisson Model
z <- glmmTMB(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + (1|SUBJECT_ID), data = full_set, family = poisson, zi = ~ vaginal_pH + reported_ga + alpha_div)
summary(z)
neg_bin<- glmmTMB(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + offset(log(num_reads)) + (1|SUBJECT_ID), data = full_set, family = nbinom2, zi = ~ vaginal_pH + reported_ga + alpha_div)
summary(neg_bin)
predict(neg_bin)
neg_binone <- glmmTMB(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + offset(log(num_reads)) + (1|SUBJECT_ID), data = full_set, family = nbinom2, zi = ~ 1)
summary(neg_binone)
hist(predict(neg_binone))
hist(predict(z))
mixedL <- lmer(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
library(lme4)
#Mixed Linear Regression Model
mixedL <- lmer(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
summary(mixedL)
linpred <- predict(mixedL)
#predicted
#x-axis people
#y-axis visits for that person
plot(full_set$Lactobacillus_iners[which(names(linpred) %in% rownames(full_set))], linpred)
library(aod)
full_set$p_Iners[which(full_set$p_Iners == 1)] <- 0.99999
betaIners <- glmmTMB(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set, family=beta_family(link = "logit"), zi = ~ 1)
betapred <- predict(betaIners)
coefplot2(betaIners)
plot(betaIners)
summary(betaIners)
#predicted
#x-axis people
#y-axis visits for that person
plot(full_set$p_Iners[which(names(betapred) %in% rownames(full_set))], betapred)
zoib(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race | 1, data = full_set)
mixedL <- lmer(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
par(mfrow = c(2,2))
coefplot2(mixedL)
plot(mixedL)
linpred <- predict(mixedL)
#predicted
#x-axis people
#y-axis visits for that person
plot(full_set$p_Iners[which(names(linpred) %in% rownames(full_set))], linpred)
mixedL <- lmer(p_Iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
#par(mfrow = c(2,2))
coefplot2(mixedL)
plot(mixedL)
linpred <- predict(mixedL)
#predicted
#x-axis people
#y-axis visits for that person
plot(full_set$p_Iners[which(names(linpred) %in% rownames(full_set))], linpred)
stratified1
stratified1 = tableone::CreateTableOne(
vars = Varnames[1:3],
data = summarytools::unlabel(demog), strata = "race", includeNA = TRUE)
stratified1
prop_table
count_table
hist(full_set$Lactobacillus_iners)
count_plot <- ggplot(full_set, aes(Lactobacillus_iners)) + geom_histogram() + ggtitle("Iners Count Histogram")
count_plot
prop_plot <- ggplot(full_set, aes(p_Iners)) + geom_histogram() + ggtitle("Iners Proportion Histogram")
prop_plot
hist(full_set$Lactobacillus_iners)
count_plot <- ggplot(full_set, aes(Lactobacillus_iners)) + geom_histogram() + ggtitle("Iners Count Histogram")
count_plot
prop_plot <- ggplot(full_set, aes(p_Iners)) + geom_histogram() + ggtitle("Iners Proportion Histogram")
prop_plot
df <- aggregate(alpha_div ~ SUBJECT_ID, data = meta%>%data.frame, FUN = mean)
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race)) +
facet_wrap(~race, ncol=1)
ggplot(count_table, aes(reported_ga, p_Iners)) +
geom_line(aes(group=race, color=race))
hist(predict(z))
#summary(m1 <- zeroinfl(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div |SUBJECT_ID, data = full_set))
z <- glmmTMB(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + (1|SUBJECT_ID), data = full_set, family = poisson, zi = ~ 0)
summary(z)
mixedL <- lmer(Lactobacillus_iners ~ vaginal_pH + reported_ga + alpha_div + race + (1|SUBJECT_ID), data = full_set)
summary(mixedL)
linpred <- predict(mixedL)
#predicted
#x-axis people
#y-axis visits for that person
plot(full_set$Lactobacillus_iners[which(names(linpred) %in% rownames(full_set))], linpred)
require(ggplot2)
#install.packages("pscl")
#install.packages(glmmTMB)
require(glmmTMB)
require(pscl)
require(boot)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(here)
library(phyloseq)
